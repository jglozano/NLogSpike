<script type='text/javascript'>

    (function () {

        Raphael.fn.label = function (cx, cy, txt) {
            var paper = this,
                chart = this.set();
            paper.text(cx, cy, txt).attr({ fill: "#222", stroke: "none", opacity: 1, "font-size": 12, "font-weight": "bold", "text-align": "left" });
            return chart;
        };

        Raphael.fn.pieChart = function (cx, cy, r, values, labels, stroke) {
            var paper = this,
                rad = Math.PI / 180,
                chart = this.set();
            function sector(cx, cy, r, startAngle, endAngle, params) {
                var x1 = cx + r * Math.cos(-startAngle * rad),
                    x2 = cx + r * Math.cos(-endAngle * rad),
                    y1 = cy + r * Math.sin(-startAngle * rad),
                    y2 = cy + r * Math.sin(-endAngle * rad);
                return paper.path(["M", cx, cy, "L", x1, y1, "A", r, r, 0, +(endAngle - startAngle > 180), 0, x2, y2, "z"]).attr(params);
            }
            var angle = 0,
                start = 0,
                process = function (j, total) {
                    var value = values[j],
                        perc = value / total,
                        angleplus = 360 * perc,
                        color = Raphael.hsb(start, .75, 1),
                        msin = 500,
                        msout = 100,
                        bcolor = Raphael.hsb(start, 1, 1),
                        p = sector(cx, cy, r, angle, angle + angleplus, { fill: "90-" + bcolor + "-" + color, stroke: stroke, "stroke-width": 3 }),
                        txt = paper.text(cx, cy + 1.3 * r, labels[j] + ': ' + Math.round(perc * 10000) / 100 + '%').attr({ fill: "#222", stroke: "none", opacity: 0, "font-size": 12, "font-weight": "bold", "text-align": "left" });
                    p.mouseover(function () {
                        p.stop().animate({ transform: "s1.1 1.1 " + cx + " " + cy }, msin, "elastic");
                        txt.stop().animate({ opacity: 1 }, msin, "elastic");
                    }).mouseout(function () {
                        p.stop().animate({ transform: "" }, msout, "elastic");
                        txt.stop().animate({ opacity: 0 }, msout);
                    });
                    angle += angleplus;
                    chart.push(p);
                    chart.push(txt);
                    start += .1;
                };
            var t = 0;
            for (var i = 0, ii = values.length; i < ii; i++) {
                t += values[i];
            }
            for (i = 0; i < ii; i++) {
                process(i, t);
            }
            return chart;
        };

        elmahr.registerComputationsReceiver({
            stats: function (acc) {
                //pie chart
                var values = [],
                    labels = [],
                    stats = acc.stats;
                for (var k = 0; k < stats.length; k++) {
                    var kvp = stats[k];

                    var key = kvp.key;
                    if (key) {
                        labels.push(key);
                        values.push(kvp.value);
                    }
                }

                var w = $('#piechart').width();
                var h = w;
                var x = w / 2;
                var r = x * 0.65;
                var y = r * 1.2;

                $("#piechart").height(h);
                $("#piechart").html("");

                console.log('pieChart size: %0, %1'.format(w, h));

                if (values.length > 1) {
                    Raphael("piechart", w, h).pieChart(x, y, r, values, labels, "#999");
                } else {
                    var chart = Raphael("piechart", w, h);
                    chart.label(x, y, "Not enough error types,");
                    chart.label(x, y + 14, "at least 2 needed");
                }
            }
        });

        var current = 0;
        var mediaQuerySurrogate = function () {
            var w = $('#piechart').width();
            if (w !== current) {
                current = w;
                elmahr.refreshStatsFor();
            }
        };

        mediaQuerySurrogate();
        $(window).bind('resize', mediaQuerySurrogate);

    }());

</script>

